<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never Too Old To Learn</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-10T15:20:00.420Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优化-性能优化</title>
    <link href="http://yoursite.com/wiki/%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/wiki/%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、加载优化  </span><br><span class="line">    静态资源加载优化，cdn or oss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    尽可能少的加载外联css、js代码，html头部，增加dsn-preftch，减少dns解析时间</span><br><span class="line">    压缩css js pic，减小体积，服务端开启gzip压缩</span><br><span class="line">    控制http请求</span><br><span class="line">    js加载脚本阻塞浏览器主线程，考虑异步， 如 <span class="keyword">async</span></span><br><span class="line">    利用好缓存，利用好http响应头缓存字段，开启静态资源缓存</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、浏览器渲染</span><br><span class="line">    css层不要太深，避免最内层使用统配选择器</span><br><span class="line">    js脚本不要太复杂，减少js解析时间，少引用复杂的第三方脚本</span><br><span class="line">    模块按需加载，按需打包，首页仅仅加载和执行和首屏相关的脚本，其他脚本延迟加载</span><br><span class="line">    第三方包需不需 要精简</span><br><span class="line">    打包优化，code split webpack</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，缓存</span><br><span class="line">    内存  响应资源放入内存，直接读取，无需线程转换， 消耗资源</span><br><span class="line">    客户端缓存</span><br><span class="line">    HTTp缓存   catche-control与服务器进行数据协商，根据标准缓存活着更新资源</span><br><span class="line">    网络相关的缓存  一般指dns解析结果的缓存或者预连接缓存，创建一个https成本很大</span><br><span class="line">    cdn  根据用户ip地址及请求的url选择一台距离用户比较近的资源缩短路径，提升性能  </span><br><span class="line">    localstorage缓存html文档首次访问页面时，js执行完后会生成完整的html文档，缓存到localstorage里面  </span><br><span class="line"></span><br><span class="line">浏览器js占用大量时间</span><br><span class="line"></span><br><span class="line">LINUX命令将一个文件夹里面的所有文件复制到指定文件里     cp -r /root/XXX/Account/. /ftp/ZJNX</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="优化" scheme="http://yoursite.com/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化 浏览器渲染 缓存" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>vue中key的作用总结</title>
    <link href="http://yoursite.com/wiki/vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/wiki/vue%E4%B8%ADkey%E7%9A%84%E4%BD%9C%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-中-key-的作用-总结："><a href="#vue-中-key-的作用-总结：" class="headerlink" title="vue 中 key 的作用 总结："></a>vue 中 key 的作用 总结：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key的作用主要是为了高效的更新虚拟dom 没有加key，diff默认算法的问题（虚拟dom） </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 如果节点类型不同，直接干掉前面所有的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 如果节点类型相同，则会重新设置节点的属性，从而实现节点的更新</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-中-key-的作用-总结：&quot;&gt;&lt;a href=&quot;#vue-中-key-的作用-总结：&quot; class=&quot;headerlink&quot; title=&quot;vue 中 key 的作用 总结：&quot;&gt;&lt;/a&gt;vue 中 key 的作用 总结：&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue key" scheme="http://yoursite.com/tags/Vue-key/"/>
    
  </entry>
  
  <entry>
    <title>linux-常用命令</title>
    <link href="http://yoursite.com/wiki/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/wiki/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-01T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="复制文件-到另一个文件夹"><a href="#复制文件-到另一个文件夹" class="headerlink" title="复制文件 到另一个文件夹"></a>复制文件 到另一个文件夹</h3><h3 id="将一个文件夹里面的所有文件复制到指定文件里"><a href="#将一个文件夹里面的所有文件复制到指定文件里" class="headerlink" title="将一个文件夹里面的所有文件复制到指定文件里"></a>将一个文件夹里面的所有文件复制到指定文件里</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/XXX/Account/. /ftp/ZJNX</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;复制文件-到另一个文件夹&quot;&gt;&lt;a href=&quot;#复制文件-到另一个文件夹&quot; class=&quot;headerlink&quot; title=&quot;复制文件 到另一个文件夹&quot;&gt;&lt;/a&gt;复制文件 到另一个文件夹&lt;/h3&gt;&lt;h3 id=&quot;将一个文件夹里面的所有文件复制到指定文件里&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="命令" scheme="http://yoursite.com/categories/Linux/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux基础 常用命令" scheme="http://yoursite.com/tags/linux%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>楼市早讯</title>
    <link href="http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-axios%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-axios%E5%B0%81%E8%A3%85/</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="楼市早讯登录功能总结"><a href="#楼市早讯登录功能总结" class="headerlink" title="楼市早讯登录功能总结"></a>楼市早讯登录功能总结</h3><h4 id="axios-封装"><a href="#axios-封装" class="headerlink" title="axios 封装"></a>axios 封装</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以挂载到原型对象上组建中通过<span class="selector-tag">this</span>访问</span><br><span class="line">此项目我们把每一个请求都封装成一个一个的独立功能函数，</span><br><span class="line">在需要的时候加载调用即可</span><br></pre></td></tr></table></figure><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户相关的请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/app/v1_0/authorizations&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">然后在登录页面中加载调用用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; login &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> onLogin () &#123;</span><br><span class="line">  <span class="comment">// const loginToast = this.$toast.loading(&#123;</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading(&#123;</span><br><span class="line">    duration: <span class="number">0</span>, <span class="comment">// 持续时间，0表示持续展示不停止</span></span><br><span class="line">    forbidClick: <span class="literal">true</span>, <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">    message: <span class="string">&#x27;登录中...&#x27;</span> <span class="comment">// 提示消息</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">+    <span class="keyword">const</span> res = <span class="keyword">await</span> login(<span class="built_in">this</span>.user)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;登录成功&#x27;</span>, res)</span><br><span class="line">    <span class="comment">// 提示 success 或者 fail 的时候，会先把其它的 toast 先清除</span></span><br><span class="line">    <span class="built_in">this</span>.$toast.success(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;登录失败&#x27;</span>, err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">&#x27;登录失败，手机号或验证码错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="token处理-存储在VueX"><a href="#token处理-存储在VueX" class="headerlink" title="token处理 存储在VueX"></a>token处理 存储在VueX</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、在 <span class="string">`src/store/index.js`</span> 中</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 登录用户，一个对象，包含 token 信息</span></span><br><span class="line">+    user: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">+    setUser (state, data) &#123;</span><br><span class="line">+      state.user = data</span><br><span class="line">+    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、登录成功以后将后端返回的 token 相关数据存储到容器中</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> onLogin () &#123;</span><br><span class="line">  <span class="comment">// const loginToast = this.$toast.loading(&#123;</span></span><br><span class="line">  <span class="built_in">this</span>.$toast.loading(&#123;</span><br><span class="line">    duration: <span class="number">0</span>, <span class="comment">// 持续时间，0表示持续展示不停止</span></span><br><span class="line">    forbidClick: <span class="literal">true</span>, <span class="comment">// 是否禁止背景点击</span></span><br><span class="line">    message: <span class="string">&#x27;登录中...&#x27;</span> <span class="comment">// 提示消息</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> login(<span class="built_in">this</span>.user)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.data.data =&gt; &#123; token: &#x27;xxx&#x27;, refresh_token: &#x27;xxx&#x27; &#125;</span></span><br><span class="line">+    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;setUser&#x27;</span>, res.data.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示 success 或者 fail 的时候，会先把其它的 toast 先清除</span></span><br><span class="line">    <span class="built_in">this</span>.$toast.success(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;登录失败&#x27;</span>, err)</span><br><span class="line">    <span class="built_in">this</span>.$toast.fail(<span class="string">&#x27;登录失败，手机号或验证码错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 停止 loading，它会把当前页面中所有的 toast 都给清除</span></span><br><span class="line">  <span class="comment">// loginToast.clear()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="持久化-token-存储"><a href="#持久化-token-存储" class="headerlink" title="持久化 token 存储"></a>持久化 token 存储</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Vuex 容器中的数据只是为了方便在其他任何地方能获取登录状态数据，</span><br><span class="line">但是页面刷新还是会丢失数据状态，所以我们还要把数据进行持久化中</span><br><span class="line">以防止页面刷新丢失状态的问题。</span><br><span class="line">前端持久化常见的方式就是：</span><br><span class="line"></span><br><span class="line">- 本地存储</span><br><span class="line">- Cookie</span><br><span class="line"></span><br><span class="line">这里我们以使用本地存储持久化用户状态为例。</span><br><span class="line"></span><br><span class="line">为了方便，这里先封装一个用于操作本地存储的工具模块。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、创建 src/utils/storage.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getItem = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(name));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setItem = <span class="function">(<span class="params">name, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.localStorage.setItem(name, <span class="built_in">JSON</span>.stringify(value));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeItem = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.localStorage.removeItem(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、然后在容器中使用使用本地存储持久化 token 数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">+ <span class="keyword">import</span> &#123; setItem, getItem &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 登录用户，一个对象，包含 token 信息</span></span><br><span class="line">+    user: getItem(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="comment">// user: null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setUser (state, data) &#123;</span><br><span class="line">      state.user = data</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 为了防止刷新丢失 state 中的 user 状态，我们把它放到本地存储</span></span><br><span class="line">+      setItem(<span class="string">&#x27;user&#x27;</span>, state.user)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用请求拦截器统一添加-token"><a href="#使用请求拦截器统一添加-token" class="headerlink" title="使用请求拦截器统一添加 token"></a>使用请求拦截器统一添加 token</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 在非组件模块中访问容器，直接 import 加载即可</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = store.state.user</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="comment">// 注意：后端要求 Bearer 后面有个空格，多了少了都不行</span></span><br><span class="line">      <span class="comment">// Authorization 也是后端要求的名字，不能乱写</span></span><br><span class="line">      config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;user.token&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="处理-token-过期-实现无缝刷新"><a href="#处理-token-过期-实现无缝刷新" class="headerlink" title="处理 token 过期 实现无缝刷新"></a>处理 token 过期 实现无缝刷新</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">参考</span><br><span class="line">https:<span class="comment">//emacle.github.io/posts/vue-token-guo-qi-wu-feng-shua-xin/</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/djzhao627/article/details/101193213</span></span><br><span class="line">在响应中需要进行Token的校验，失效后进行Token的刷新并重发请求</span><br><span class="line">请求重发的注意点是，使用响应里的config作为参数进行重发</span><br><span class="line"></span><br><span class="line">在请求的响应拦截器中统一处理 token 过期</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 axios 请求模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> jsonBig <span class="keyword">from</span> <span class="string">&quot;json-bigint&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios.create 方法：复制一个 axios</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&quot;http://ttapi.research.itcast.cn/&quot;</span> <span class="comment">// 基础路径</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置处理后端返回数据中超出 js 安全整数范围问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request.defaults.transformResponse = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> jsonBig.parse(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = store.state.user;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;user.token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 响应成功进入第1个函数</span></span><br><span class="line">  <span class="comment">// 该函数的参数是响应对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 响应失败进入第2个函数，该函数的参数是错误对象</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="comment">// 如果响应码是 401 ，则请求获取新的 token</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应拦截器中的 error 就是那个响应的错误对象</span></span><br><span class="line">    <span class="built_in">console</span>.dir(error);</span><br><span class="line">    <span class="keyword">if</span> (error.response &amp;&amp; error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 校验是否有 refresh_token</span></span><br><span class="line">      <span class="keyword">const</span> user = store.state.user;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!user || !user.refresh_token) &#123;</span><br><span class="line">        router.push(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码不要往后执行了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果有refresh_token，则请求获取新的 token</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">          method: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">          url: <span class="string">&quot;http://ttapi.research.itcast.cn/app/v1_0/authorizations&quot;</span>,</span><br><span class="line">          headers: &#123;</span><br><span class="line">            Authorization: <span class="string">`Bearer <span class="subst">$&#123;user.refresh_token&#125;</span>`</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果获取成功，则把新的 token 更新到容器中</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;刷新 token  成功&quot;</span>, res);</span><br><span class="line">        store.commit(<span class="string">&quot;setUser&quot;</span>, &#123;</span><br><span class="line">          token: res.data.data.token, <span class="comment">// 最新获取的可用 token</span></span><br><span class="line">          refresh_token: user.refresh_token <span class="comment">// 还是原来的 refresh_token</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把之前失败的用户请求继续发出去</span></span><br><span class="line">        <span class="comment">// config 是一个对象，其中包含本次失败请求相关的那些配置信息，例如 url、method 都有</span></span><br><span class="line">        <span class="comment">// return 把 request 的请求结果继续返回给发请求的具体位置</span></span><br><span class="line">        <span class="keyword">return</span> request(error.config);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 如果获取失败，直接跳转 登录页</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;请求刷线 token 失败&quot;</span>, err);</span><br><span class="line">        router.push(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure><h4 id="登录成功跳转回原来页面"><a href="#登录成功跳转回原来页面" class="headerlink" title="登录成功跳转回原来页面"></a>登录成功跳转回原来页面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在响应中需要进行Token的校验，失效后进行Token的刷新并重发请求</span><br><span class="line">请求重发的注意点是，使用响应里的config作为参数进行重发</span><br></pre></td></tr></table></figure><h4 id="头像更新–eventBus"><a href="#头像更新–eventBus" class="headerlink" title="头像更新–eventBus"></a>头像更新–eventBus</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 公共实例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue() <span class="comment">// 公共实例 =&gt; 实例化了一个Vue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 认为保存成功 =&gt; 通知header组件 更新信息</span></span><br><span class="line">    eventBus.$emit(<span class="string">&#x27;updateUserInfo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   eventBus.$on(<span class="string">&#x27;updateUserInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 认为别人更新了数据 自己也应该更新</span></span><br><span class="line">        <span class="built_in">this</span>.getUserInfo()</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h4 id="素材轮播展示–carousel"><a href="#素材轮播展示–carousel" class="headerlink" title="素材轮播展示–carousel"></a>素材轮播展示–carousel</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">carsouel</span> 是懒加载的  第一次没有弹出之前  是没有组件元素的</span><br><span class="line">即使拿到<span class="selector-tag">index</span> 也没法用，因为不知道什么时间加载完，什么时间要用</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">dialog</span> 的<span class="selector-tag">open</span> 方法， 不能用，不知道什么时间渲染完成，所以用<span class="selector-tag">opened</span></span><br><span class="line"></span><br><span class="line">轮播逻辑</span><br><span class="line"><span class="selector-tag">dialog</span> 渲染 <span class="selector-tag">list</span> 里面的数据</span><br><span class="line">点击时转存索引  通过<span class="selector-tag">opened</span>事件 用 <span class="selector-tag">ref</span>调用文档中的<span class="selector-tag">api</span> <span class="selector-tag">setActiveItem</span>（索引实现跳转）</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">#### </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;楼市早讯登录功能总结&quot;&gt;&lt;a href=&quot;#楼市早讯登录功能总结&quot; class=&quot;headerlink&quot; title=&quot;楼市早讯登录功能总结&quot;&gt;&lt;/a&gt;楼市早讯登录功能总结&lt;/h3&gt;&lt;h4 id=&quot;axios-封装&quot;&gt;&lt;a href=&quot;#axios-封装&quot; cla
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="游乐招商" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86/"/>
    
    
      <category term="Vue 项目 后台管理" scheme="http://yoursite.com/tags/Vue-%E9%A1%B9%E7%9B%AE-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>所遇问题</title>
    <link href="http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h4 id="容器-login-error-页面一级路由"><a href="#容器-login-error-页面一级路由" class="headerlink" title="容器 login error 页面一级路由"></a>容器 login error 页面一级路由</h4><h4 id="背景图不显示"><a href="#背景图不显示" class="headerlink" title="背景图不显示"></a>背景图不显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">背景图不显示, 是因为父级没有高度， 用<span class="selector-tag">vh</span>  可视区域分成100份</span><br></pre></td></tr></table></figure><h4 id="侧边栏布局"><a href="#侧边栏布局" class="headerlink" title="侧边栏布局"></a>侧边栏布局</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">components/home 创建layout-aside  然后再home组件内引入 注册使用</span><br><span class="line"></span><br><span class="line">注册</span><br><span class="line">&lt;<span class="selector-tag">script</span>&gt;</span><br><span class="line">import LayoutAside from &#x27;../components/home/layout-aside&#x27;</span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</span><br><span class="line">  <span class="attribute">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;layout-aside&#x27;</span>: LayoutAside</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">&lt;<span class="selector-tag">el-aside</span>&gt;</span><br><span class="line">    &lt;layout-aside&gt;&lt;/layout-aside&gt;</span><br><span class="line">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure><h4 id="修改-elementUI-元素样式"><a href="#修改-elementUI-元素样式" class="headerlink" title="修改 elementUI 元素样式"></a>修改 elementUI 元素样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">el-form-item</span></span><br><span class="line">  &gt; &lt;<span class="selector-tag">el-checkbox</span></span><br><span class="line">  v-model=&quot;checked&quot;</span><br><span class="line">  &gt; 请勾选协议(必选项)&lt;/el-checkbox</span><br><span class="line">  &gt; &lt;/el-form-item</span><br><span class="line">  &gt; /deep/</span><br><span class="line">  <span class="selector-class">.el-form-item__content</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ElementUI-全局注册插件封装-页面布局、面包屑导航"><a href="#ElementUI-全局注册插件封装-页面布局、面包屑导航" class="headerlink" title="ElementUI 全局注册插件封装(页面布局、面包屑导航)"></a>ElementUI 全局注册插件封装(页面布局、面包屑导航)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> layoutAside <span class="keyword">from</span> <span class="string">&#x27;./home/layout-aside&#x27;</span></span><br><span class="line"><span class="keyword">import</span> layoutHeader <span class="keyword">from</span> <span class="string">&#x27;./home/layout-header&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有自定义组件的插件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install: <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    Vue.component(<span class="string">&#x27;layout-aside&#x27;</span>, layoutAside) <span class="comment">// 注册 左侧导航组件</span></span><br><span class="line">    Vue.component(<span class="string">&#x27;layout-header&#x27;</span>, layoutHeader) <span class="comment">// 注册头部组件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">面包屑导航通过 具名插槽的方式 传入当前页面的名称</span><br></pre></td></tr></table></figure><h3 id="axios-封装"><a href="#axios-封装" class="headerlink" title="axios 封装"></a>axios 封装</h3><h4 id="封装总结"><a href="#封装总结" class="headerlink" title="封装总结"></a>封装总结</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求拦截器 响应拦截器  发送前数据处理  接收前数据处理  统一错误状态码处理</span><br></pre></td></tr></table></figure><h4 id="封装逻辑"><a href="#封装逻辑" class="headerlink" title="封装逻辑"></a>封装逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> JSONBig <span class="keyword">from</span> <span class="string">&#x27;json-bigint&#x27;</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://ttapi.research.itcast.cn/mp/v1_0&#x27;</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 发送请求做一些逻辑处理</span></span><br><span class="line"><span class="comment">// config 是要发送请求的配置信息</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;user_token&#x27;</span>)</span><br><span class="line">  config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">axios.defaults.transformResponse = [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return JSON.parse(data)</span></span><br><span class="line">  <span class="keyword">return</span> data ? JSONBig.parse(data) : &#123;&#125;</span><br><span class="line">&#125;]</span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">return</span> response.data ? response.data : &#123;&#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">const</span> status = error.response.status</span><br><span class="line">  <span class="comment">// console.log(status)</span></span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&#x27;未知错误&#x27;</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求参数错误&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      message = <span class="string">&#x27;没有token 过期&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">507</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务器数据库异常&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      message = <span class="string">&#x27;token过期或未出&#x27;</span></span><br><span class="line">      <span class="built_in">window</span>.localStorage.clear() <span class="comment">// 清空缓存</span></span><br><span class="line">      router.push(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// this.$router.push()</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      message = <span class="string">&#x27;手机号不正确&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  Message(&#123; message &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设计三点 token的存储及携带  页面权限(导航守卫)</span><br></pre></td></tr></table></figure><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   点击菜单项时触发</span></span><br><span class="line">clickMenu (command) &#123;</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">&#x27;info&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command === <span class="string">&#x27;git&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//   跳转到git地址</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&#x27;https://github.com/shuiruohanyu/90heimatoutiao&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//    退出</span></span><br><span class="line">    <span class="built_in">window</span>.localStorage.removeItem(<span class="string">&#x27;user-token&#x27;</span>) <span class="comment">// 删除令牌</span></span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 回到登录页</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="token存储在本地"><a href="#token存储在本地" class="headerlink" title="token存储在本地"></a>token存储在本地</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/authorizations&#x27;</span>, <span class="comment">// 请求地址 axios 没有指定 类型 默认走get类型</span></span><br><span class="line">      method: <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 类型</span></span><br><span class="line">      data: <span class="built_in">this</span>.loginForm <span class="comment">// body 参数</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 只接受正确结果</span></span><br><span class="line">      <span class="comment">// 前端缓存 登录成功返回给我们的令牌</span></span><br><span class="line">      <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;user-token&#x27;</span>, result.data.data.token)</span><br><span class="line">    &#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="token-携带–请求拦截器"><a href="#token-携带–请求拦截器" class="headerlink" title="token 携带–请求拦截器"></a>token 携带–请求拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负责对axios进行处理</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发起请求请做一些业务处理</span></span><br><span class="line">  <span class="comment">// config是要发送请求的配置信息</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;user-token&#x27;</span>) <span class="comment">// 获取token</span></span><br><span class="line">  config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span> <span class="comment">// 统一注入token 到headers属性 因为所有接口要求的token格式是一样的</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求失败做处理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><h4 id="页面进入权限"><a href="#页面进入权限" class="headerlink" title="页面进入权限"></a>页面进入权限</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> next()<span class="string">`** =&gt;表示 resolve =&gt; 表示放过当前的请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**`</span>next(<span class="literal">false</span>)<span class="string">`**: 中断当前的导航</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> **`</span>next(地址)<span class="string">`** 拦截即将要去的地方 转到另外一个地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> router.beforeEach  =&gt; 全局前置守卫 =&gt; 在每一个路由发生改变之前 会触发这个事件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  router.beforeEach(function(to,from,next)&#123;&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  login =&gt; home</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  this.$route.path</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  to: Route**: 即将要进入的目标 [路由对象](https://router.vuejs.org/zh/api/#路由对象)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  from: Route**: 当前导航正要离开的路由</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  next: Function**: 一定要调用该方法来 **resolve** 这个钩子。执行效果依赖 `</span>next<span class="string">` 方法的调用参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  new Promise(function(resolve,reject)&#123;   &#125;).then</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   next函数必须执行 =&gt;不执行 就会死在跳转的位置</span></span><br><span class="line"><span class="string">   如果直接执行next() =&gt; 表示一切正常 login =&gt; home 可以正常走   类似 callback()</span></span><br><span class="line"><span class="string">   next(false)** =&gt; 中断当前的导航 =&gt;  login =&gt; home 不能正常走  停在login</span></span><br><span class="line"><span class="string">  next(地址)** =&gt; 强制将login=&gt;home =&gt;另一个地址 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  代码====&gt;创建permission 引入router  然后再main.js引入permission</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 处理路由拦截器 导航守卫</span></span><br><span class="line"><span class="string">import router from &#x27;../router&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 全局前置守卫  当 路由发生变化时 这个方法里的回调函数就会执行</span></span><br><span class="line"><span class="string">router.beforeEach(function (to, from, next) &#123;</span></span><br><span class="line"><span class="string">  // 权限拦截 认为有token 让过去 没token不让过</span></span><br><span class="line"><span class="string">  if (to.path.startsWith(&#x27;/home&#x27;)) &#123;</span></span><br><span class="line"><span class="string">    //   确定要去检查的范围</span></span><br><span class="line"><span class="string">    let token = window.localStorage.getItem(&#x27;user-token&#x27;)</span></span><br><span class="line"><span class="string">    if (token) &#123;</span></span><br><span class="line"><span class="string">      next() // 放过</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      next(&#x27;/login&#x27;) // 跳转到登录页</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125; else &#123;</span></span><br><span class="line"><span class="string">    next() // 直接放过</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="业务功能"><a href="#业务功能" class="headerlink" title="业务功能"></a>业务功能</h3><h4 id="评论列表—打开关闭"><a href="#评论列表—打开关闭" class="headerlink" title="评论列表—打开关闭"></a>评论列表—打开关闭</h4><h5 id="打开关闭"><a href="#打开关闭" class="headerlink" title="打开关闭"></a>打开关闭</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$confirm(<span class="string">`您是否确定要<span class="subst">$&#123;mess&#125;</span>评论吗`</span>, <span class="string">&#x27;提示&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 调用接口</span></span><br><span class="line">  <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/comments/status&#x27;</span>,</span><br><span class="line">    params: &#123; <span class="attr">article_id</span>: row.id &#125;,</span><br><span class="line">    data: &#123; <span class="attr">allow_comment</span>: !row.comment_status &#125; <span class="comment">// 因为当前如果是打开 ,就要关闭 如果是关闭 就要打开</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  表示执行成功</span></span><br><span class="line">    <span class="built_in">this</span>.getComment() <span class="comment">// 重新拉取评论管理数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="列表分页"><a href="#列表分页" class="headerlink" title="列表分页"></a>列表分页</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">放置一个分页组件</span><br><span class="line"> &lt;el-row type=<span class="string">&#x27;flex&#x27;</span> justify=<span class="string">&quot;center&quot;</span> align=<span class="string">&quot;middle&quot;</span> style=<span class="string">&quot;height:80px&quot;</span>&gt;</span><br><span class="line">      &lt;!-- 分页组件 total 总页码  每页多少条--&gt;</span><br><span class="line">      &lt;el-pagination background layout=<span class="string">&quot;prev, pager, next&quot;</span></span><br><span class="line">       :current-page=<span class="string">&quot;page.currentPage&quot;</span></span><br><span class="line">       :page-size=<span class="string">&quot;page.pageSize&quot;</span></span><br><span class="line">       :total=<span class="string">&quot;page.total&quot;</span></span><br><span class="line">       @current-change=<span class="string">&quot;changePage&quot;</span></span><br><span class="line">       &gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">   total  =&gt; 总条数 </span><br><span class="line"> page-<span class="function"><span class="params">size</span> =&gt;</span> 每页多少条</span><br><span class="line"> current-<span class="function"><span class="params">page</span> =&gt;</span> 当前页码</span><br><span class="line"> @current-<span class="function"><span class="params">change</span> =&gt;</span> 当前页码改变触发的事件 =&gt; 将最新页码 赋值给当前页码 =&gt; 请求数据</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 页码改变事件</span></span><br><span class="line">    changePage (newPage) &#123;</span><br><span class="line">      <span class="built_in">this</span>.page.currentPage = newPage <span class="comment">// 最新的页码</span></span><br><span class="line">      <span class="built_in">this</span>.getComment()</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h5 id="优化—加载状态"><a href="#优化—加载状态" class="headerlink" title="优化—加载状态"></a>优化—加载状态</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getComment () &#123;</span><br><span class="line">   <span class="built_in">this</span>.loading = <span class="literal">true</span> <span class="comment">// 打开进度条</span></span><br><span class="line">   <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">     url: <span class="string">&#x27;/articles&#x27;</span>,</span><br><span class="line">     params: &#123; <span class="attr">response_type</span>: <span class="string">&#x27;comment&#x27;</span>, <span class="attr">page</span>: <span class="built_in">this</span>.page.currentPage, <span class="attr">per_page</span>: <span class="built_in">this</span>.page.pageSize &#125;</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.list = result.data.results</span><br><span class="line">     <span class="built_in">this</span>.page.total = result.data.total_count <span class="comment">// 总条数</span></span><br><span class="line">     <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">     <span class="comment">// setTimeout(() =&gt; &#123; this.loading = false &#125;, 300) // 关闭</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h4 id="素材列表"><a href="#素材列表" class="headerlink" title="素材列表"></a>素材列表</h4><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tabs v-model=&quot;activeName&quot;&gt;</span><br><span class="line">       &lt;!<span class="selector-tag">--</span> 标签 <span class="selector-tag">--</span>&gt;</span><br><span class="line">       &lt;el-tab-pane label=&quot;全部图片&quot; name=&quot;all&quot;&gt;全部&lt;/el-tab-pane&gt;</span><br><span class="line">       &lt;el-tab-pane label=&quot;收藏图片&quot; name=&quot;collect&quot;&gt;收藏&lt;/el-tab-pane&gt;</span><br><span class="line">   &lt;/el-tabs&gt;</span><br></pre></td></tr></table></figure><p>#####</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- 收藏 和全部 要公用一个list数据</span><br><span class="line">- 由于当前只能看到一个页签 ,所以当点击页签时 ,就</span><br><span class="line">去加载点击页签的数据,就可以保证数据的正确</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      activeName: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 当前选中的标签</span></span><br><span class="line">      list: [] <span class="comment">// 接收素材数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 切换页签方法</span></span><br><span class="line">    changeTab () &#123;</span><br><span class="line">      <span class="built_in">this</span>.getMaterial() <span class="comment">// 调用获取数据方法</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取素材的方法</span></span><br><span class="line">    getMaterial () &#123;</span><br><span class="line">      <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/user/images&#x27;</span>,</span><br><span class="line">        params: &#123;</span><br><span class="line">          collect: <span class="built_in">this</span>.activeName === <span class="string">&#x27;collect&#x27;</span> <span class="comment">// 传false是获取所有的数据 传true是获取收藏数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = result.data.results <span class="comment">// 获取图片数据 有可能是 全部 也由可能是收藏</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">this</span>.getMaterial()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="素材列表-分页组件及请求"><a href="#素材列表-分页组件及请求" class="headerlink" title="素材列表-分页组件及请求"></a>素材列表-分页组件及请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 公共分页组件 --&gt;</span><br><span class="line">        &lt;el-row type=<span class="string">&quot;flex&quot;</span> justify=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">           &lt;el-pagination</span><br><span class="line">               :current-page=<span class="string">&quot;page.currentPage&quot;</span></span><br><span class="line">               :page-size=<span class="string">&quot;page.pageSize&quot;</span></span><br><span class="line">               :total=<span class="string">&quot;page.total&quot;</span></span><br><span class="line">               @current-change=<span class="string">&quot;changePage&quot;</span></span><br><span class="line">               background</span><br><span class="line">               layout=<span class="string">&quot;prev, pager, next&quot;</span></span><br><span class="line">              &gt;</span><br><span class="line">           &lt;/el-pagination&gt;</span><br><span class="line">         &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line"> js代码</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        activeName: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 当前选中的标签</span></span><br><span class="line">        list: [], <span class="comment">// 接收素材数据</span></span><br><span class="line">        page: &#123;</span><br><span class="line">          currentPage: <span class="number">1</span>,</span><br><span class="line">          pageSize: <span class="number">8</span>,</span><br><span class="line">          total: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 改变页码方法</span></span><br><span class="line">      changePage (newPage) &#123;</span><br><span class="line">        <span class="built_in">this</span>.page.currentPage = newPage</span><br><span class="line">        <span class="built_in">this</span>.getMaterial()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 切换页签方法</span></span><br><span class="line">      changeTab () &#123;</span><br><span class="line">        <span class="built_in">this</span>.page.currentPage = <span class="number">1</span> <span class="comment">// 重置回第一页</span></span><br><span class="line">        <span class="built_in">this</span>.getMaterial() <span class="comment">// 调用获取数据方法</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 获取素材的方法</span></span><br><span class="line">      getMaterial () &#123;</span><br><span class="line">        <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">          url: <span class="string">&#x27;/user/images&#x27;</span>,</span><br><span class="line">          params: &#123;</span><br><span class="line">            page: <span class="built_in">this</span>.page.currentPage,</span><br><span class="line">            per_page: <span class="built_in">this</span>.page.pageSize,</span><br><span class="line">            collect: <span class="built_in">this</span>.activeName === <span class="string">&#x27;collect&#x27;</span> <span class="comment">// 传false是获取所有的数据 传true是获取收藏数据</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.list = result.data.results <span class="comment">// 获取图片数据 有可能是 全部 也由可能是收藏</span></span><br><span class="line">          <span class="built_in">this</span>.page.total = result.data.total_count <span class="comment">// 总条数</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created () &#123;</span><br><span class="line">      <span class="built_in">this</span>.getMaterial()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   全部 /收藏 共用了list,共用了分页组件</span><br><span class="line"> 切换页签 =&gt; 将页码重置到了第一页</span><br><span class="line"> 切换页码 =&gt;  将最新页码 赋值给了当前页</span><br></pre></td></tr></table></figure><h4 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h4><h5 id="素材上传"><a href="#素材上传" class="headerlink" title="素材上传"></a>素材上传</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 上传接口 =&gt; 接口 formdata类型</span><br><span class="line">- 上传组件 =&gt; <span class="function"><span class="params">elementUI</span> =&gt;</span> upload</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传图片方法</span></span><br><span class="line">    uploadImg (params) &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span> <span class="comment">// 先弹个层</span></span><br><span class="line">      <span class="keyword">let</span> data = <span class="keyword">new</span> FormData()</span><br><span class="line">      data.append(<span class="string">&#x27;image&#x27;</span>, params.file) <span class="comment">// 文件加入到参数中</span></span><br><span class="line">      <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;/user/images&#x27;</span>,</span><br><span class="line">        data</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loading = <span class="literal">false</span> <span class="comment">// 关闭弹层</span></span><br><span class="line">        <span class="built_in">this</span>.getMaterial() <span class="comment">// 直接调用拉取数据的方法</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h5 id="素材收藏删除"><a href="#素材收藏删除" class="headerlink" title="素材收藏删除"></a>素材收藏删除</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消或者收藏</span></span><br><span class="line">  collectOrCancel (item) &#123;</span><br><span class="line">    <span class="comment">// item.iscollected true =&gt; 取消收藏 ? 收藏</span></span><br><span class="line">    <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">      method: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">      url: <span class="string">`/user/images/<span class="subst">$&#123;item.id&#125;</span>`</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        collect: !item.is_collected <span class="comment">// 取反 因为 收藏  =&gt;取消收藏</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.getMaterial() <span class="comment">// 重新拉取数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除用户图片素材</span></span><br><span class="line">  delMaterial (id) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">&#x27;你确定要删除此图片吗?&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">        url: <span class="string">`/user/images/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMaterial() <span class="comment">// 重新拉取数据</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="内容列表"><a href="#内容列表" class="headerlink" title="内容列表"></a>内容列表</h4><h5 id="页面主体结构"><a href="#页面主体结构" class="headerlink" title="页面主体结构"></a>页面主体结构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-card <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;articles&#x27;</span>&gt;</span><br><span class="line">      &lt;bread-crumb slot=<span class="string">&#x27;header&#x27;</span>&gt;</span><br><span class="line">         &lt;template slot=<span class="string">&#x27;title&#x27;</span>&gt;文章列表&lt;/template&gt;</span><br><span class="line">      &lt;/bread-crumb&gt;</span><br><span class="line">      &lt;!-- 表单容器 --&gt;</span><br><span class="line">      &lt;el-form style=<span class="string">&quot;padding-left:50px&quot;</span>&gt;</span><br><span class="line">          &lt;el-form-item label=<span class="string">&quot;文章状态:&quot;</span>&gt;</span><br><span class="line">              &lt;!-- 放置一个单选组  文章状态，<span class="number">0</span>-草稿，<span class="number">1</span>-待审核，<span class="number">2</span>-审核通过，<span class="number">3</span>-审核失败，<span class="number">4</span>-已删除，不传为全部--&gt;</span><br><span class="line">              &lt;el-radio-group v-model=<span class="string">&quot;searchForm.status&quot;</span>&gt;</span><br><span class="line">                  &lt;!-- label --&gt;</span><br><span class="line">                  &lt;el-radio :label=<span class="string">&quot;5&quot;</span>&gt;全部&lt;/el-radio&gt;</span><br><span class="line">                  &lt;el-radio :label=<span class="string">&quot;0&quot;</span>&gt;草稿&lt;/el-radio&gt;</span><br><span class="line">                  &lt;el-radio :label=<span class="string">&quot;1&quot;</span>&gt;待审核&lt;/el-radio&gt;</span><br><span class="line">                  &lt;el-radio :label=<span class="string">&quot;2&quot;</span>&gt;审核通过&lt;/el-radio&gt;</span><br><span class="line">                  &lt;el-radio :label=<span class="string">&quot;3&quot;</span>&gt;审核失败&lt;/el-radio&gt;</span><br><span class="line">              &lt;/el-radio-group&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=<span class="string">&quot;频道列表:&quot;</span>&gt;</span><br><span class="line">              &lt;el-select placeholder=<span class="string">&quot;请选择频道&quot;</span> v-model=<span class="string">&quot;searchForm.channel_id&quot;</span>&gt;</span><br><span class="line">                  &lt;!-- el-option label是显示值 value是存储值 --&gt;</span><br><span class="line">                  &lt;el-option v-<span class="keyword">for</span>=<span class="string">&quot;item in channels&quot;</span> :key=<span class="string">&quot;item.id&quot;</span> :label=<span class="string">&quot;item.name&quot;</span> :value=<span class="string">&quot;item.id&quot;</span>&gt;&lt;/el-option&gt;</span><br><span class="line">              &lt;/el-select&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">          &lt;el-form-item label=<span class="string">&quot;时间选择:&quot;</span>&gt;</span><br><span class="line">              &lt;!-- 日期选择器 日期范围--&gt;</span><br><span class="line">              &lt;el-date-picker v-model=<span class="string">&quot;searchForm.dateRange&quot;</span> type=<span class="string">&quot;daterange&quot;</span>&gt;&lt;/el-date-picker&gt;</span><br><span class="line">          &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;el-row <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;total&#x27;</span> type=<span class="string">&#x27;flex&#x27;</span> align=<span class="string">&quot;middle&quot;</span>&gt;</span><br><span class="line">          &lt;span&gt;</span><br><span class="line">              共找到<span class="number">10000</span>条符合条件的内容</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;article-item&#x27;</span> v-<span class="keyword">for</span>=<span class="string">&quot;item in 100&quot;</span> :key=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">          &lt;!-- 左侧 --&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;left&#x27;</span>&gt;</span><br><span class="line">              &lt;img src=<span class="string">&quot;../../assets/img/default.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">              &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;info&#x27;</span>&gt;</span><br><span class="line">                  &lt;span&gt;<span class="number">90</span>期的弟弟们，哈哈哈啊哈哈哈嗝&lt;/span&gt;</span><br><span class="line">                  &lt;el-tag <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;tag&#x27;</span>&gt;标签一&lt;/el-tag&gt;</span><br><span class="line">                  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;date&#x27;</span>&gt;<span class="number">2019</span><span class="number">-12</span><span class="number">-24</span> <span class="number">15</span>:<span class="number">07</span>:<span class="number">01</span>&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 右侧 --&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;right&#x27;</span>&gt;</span><br><span class="line">              &lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>修改&lt;/span&gt;</span><br><span class="line">              &lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-delete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>删除&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/el-card&gt;</span><br></pre></td></tr></table></figure><h5 id="先不做筛选-不做分页"><a href="#先不做筛选-不做分页" class="headerlink" title="先不做筛选,不做分页"></a>先不做筛选,不做分页</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- 调用接口 =&gt;先不做筛选,不做分页</span><br><span class="line">- 过滤器 不但可以用在插值表达式 </span><br><span class="line">- 还可以用在 v-bind表达式</span><br><span class="line"></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;article-item&#x27;</span> v-<span class="keyword">for</span>=<span class="string">&quot;item in list&quot;</span> :key=<span class="string">&quot;item.id.toString()&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 左侧 --&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;left&#x27;</span>&gt;</span><br><span class="line">            &lt;img :src=<span class="string">&quot;item.cover.images.length ? item.cover.images[0] : defaultImg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;info&#x27;</span>&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;!-- 文章状态 <span class="number">0</span>-草稿，<span class="number">1</span>-待审核，<span class="number">2</span>-审核通过，<span class="number">3</span>-审核失败，<span class="number">4</span>-已删除 --&gt;</span><br><span class="line">                &lt;el-tag :type=<span class="string">&quot;item.status | filterType&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;tag&#x27;</span>&gt;&#123;&#123; item.status | filterStatus &#125;&#125;&lt;/el-tag&gt;</span><br><span class="line">                &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;date&#x27;</span>&gt;&#123;&#123; item.pubdate &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 右侧 --&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;right&#x27;</span>&gt;</span><br><span class="line">            &lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>修改&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-delete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>删除&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       getArticles () &#123;</span><br><span class="line">        <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">          url: <span class="string">&#x27;/articles&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.list = result.data.results <span class="comment">// 获取文章列表数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="内容列表-页面结构-搜索筛选"><a href="#内容列表-页面结构-搜索筛选" class="headerlink" title="内容列表-页面结构-搜索筛选"></a>内容列表-页面结构-搜索筛选</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">条件 =&gt; 组合条件 =&gt; 不论谁的数据发生变化 =&gt;先组装条件  =&gt; 统一发送请求</span><br><span class="line">第一种做法=&gt;监听每个组件的change事件</span><br><span class="line">changeCondition () &#123;</span><br><span class="line">   <span class="keyword">let</span> params = &#123;</span><br><span class="line">     status: <span class="built_in">this</span>.searchForm.status === <span class="number">5</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.searchForm.status, <span class="comment">// 因为5是前端定义的一个标识, 如果等于5 表示查全部, 全部应该什么都不传 直接传null</span></span><br><span class="line">     channel_id: <span class="built_in">this</span>.searchForm.channel_id,</span><br><span class="line">     begin_pubdate: <span class="built_in">this</span>.searchForm.dateRange.length ? <span class="built_in">this</span>.searchForm.dateRange[<span class="number">0</span>] : <span class="literal">null</span>, <span class="comment">// 开始时间</span></span><br><span class="line">     end_pubdate: <span class="built_in">this</span>.searchForm.dateRange.length &gt; <span class="number">1</span> ? <span class="built_in">this</span>.searchForm.dateRange[<span class="number">1</span>] : <span class="literal">null</span> <span class="comment">// 截止时间</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">this</span>.getArticles(params)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">第二种做法 =&gt; watch 去监听数据变化</span><br><span class="line">   watch: &#123;</span><br><span class="line">      name: <span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传统模式  a: &#123; b:&#123;c:&#x27;123&#x27;&#125; &#125;</span></span><br><span class="line">  watch:&#123;</span><br><span class="line">     <span class="string">&quot;a.b.c&quot;</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  watch: &#123;</span><br><span class="line">      a:&#123;</span><br><span class="line">          handler:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="comment">// this指向当前实例</span></span><br><span class="line">          &#125; <span class="comment">// handler是一个固定写法 默认对象中任何的变化都会触发该函数</span></span><br><span class="line">          deep: <span class="literal">true</span> <span class="comment">// deep 深度检测 不论嵌套多少层 都可以监听到改变</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="内容列表-分页请求"><a href="#内容列表-分页请求" class="headerlink" title="内容列表-分页请求"></a>内容列表-分页请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   改变页码方法</span></span><br><span class="line"> changePage (newPage) &#123;</span><br><span class="line">   <span class="built_in">this</span>.page.currentPage = newPage <span class="comment">// 最新页码</span></span><br><span class="line">   <span class="built_in">this</span>.getConditionArticle() <span class="comment">// 调用获取文章数据</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">//   改变条件</span></span><br><span class="line"> changeCondition () &#123;</span><br><span class="line">   <span class="built_in">this</span>.page.currentPage = <span class="number">1</span> <span class="comment">// 强制将页码重置第一页</span></span><br><span class="line">   <span class="built_in">this</span>.getConditionArticle() <span class="comment">// 调用获取文章数据</span></span><br><span class="line"> &#125;,</span><br><span class="line"> getConditionArticle () &#123;</span><br><span class="line">   <span class="keyword">let</span> params = &#123;</span><br><span class="line">     page: <span class="built_in">this</span>.page.currentPage,</span><br><span class="line">     per_page: <span class="built_in">this</span>.page.pageSize,</span><br><span class="line">     status: <span class="built_in">this</span>.searchForm.status === <span class="number">5</span> ? <span class="literal">null</span> : <span class="built_in">this</span>.searchForm.status, <span class="comment">// 因为5是前端定义的一个标识, 如果等于5 表示查全部, 全部应该什么都不传 直接传null</span></span><br><span class="line">     channel_id: <span class="built_in">this</span>.searchForm.channel_id,</span><br><span class="line">     begin_pubdate: <span class="built_in">this</span>.searchForm.dateRange.length ? <span class="built_in">this</span>.searchForm.dateRange[<span class="number">0</span>] : <span class="literal">null</span>, <span class="comment">// 开始时间</span></span><br><span class="line">     end_pubdate: <span class="built_in">this</span>.searchForm.dateRange.length &gt; <span class="number">1</span> ? <span class="built_in">this</span>.searchForm.dateRange[<span class="number">1</span>] : <span class="literal">null</span> <span class="comment">// 截止时间</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">this</span>.getArticles(params)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="内容列表-删除内容"><a href="#内容列表-删除内容" class="headerlink" title="内容列表-删除内容"></a>内容列表-删除内容</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delMaterial (id) &#123;</span><br><span class="line">     <span class="built_in">this</span>.$confirm(<span class="string">&#x27;是否要删除该文章?&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 调用删除接口</span></span><br><span class="line">       <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">         method: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">         url: <span class="string">`/articles/<span class="subst">$&#123;id.toString()&#125;</span>`</span></span><br><span class="line">       &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 提示</span></span><br><span class="line">         <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">           type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">           message: <span class="string">&#x27;删除成功&#x27;</span></span><br><span class="line">         &#125;)</span><br><span class="line">         <span class="comment">// 重新拉取数据</span></span><br><span class="line">         <span class="comment">// this.page.currentPage = 1 // 根据业务 处理 如果删除了数据 是否回到第一页根据具体业务而定</span></span><br><span class="line">         <span class="built_in">this</span>.getConditionArticle()</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="token-携带"><a href="#token-携带" class="headerlink" title="token 携带"></a>token 携带</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### token 携带</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><h4 id="token-携带-1"><a href="#token-携带-1" class="headerlink" title="token 携带"></a>token 携带</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### token 携带</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;页面布局&quot;&gt;&lt;a href=&quot;#页面布局&quot; class=&quot;headerlink&quot; title=&quot;页面布局&quot;&gt;&lt;/a&gt;页面布局&lt;/h3&gt;&lt;h4 id=&quot;容器-login-error-页面一级路由&quot;&gt;&lt;a href=&quot;#容器-login-error-页面一级路由&quot; c
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="游乐招商" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86/"/>
    
    
      <category term="Vue 项目 后台管理" scheme="http://yoursite.com/tags/Vue-%E9%A1%B9%E7%9B%AE-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>头像同步及轮播</title>
    <link href="http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%90%8C%E6%AD%A5/</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="头像更新及carousel的使用"><a href="#头像更新及carousel的使用" class="headerlink" title="头像更新及carousel的使用"></a>头像更新及carousel的使用</h3><h4 id="头像更新–eventBus"><a href="#头像更新–eventBus" class="headerlink" title="头像更新–eventBus"></a>头像更新–eventBus</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 公共实例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue() <span class="comment">// 公共实例 =&gt; 实例化了一个Vue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 认为保存成功 =&gt; 通知header组件 更新信息</span></span><br><span class="line">    eventBus.$emit(<span class="string">&#x27;updateUserInfo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   eventBus.$on(<span class="string">&#x27;updateUserInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 认为别人更新了数据 自己也应该更新</span></span><br><span class="line">        <span class="built_in">this</span>.getUserInfo()</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h4 id="素材轮播展示–carousel"><a href="#素材轮播展示–carousel" class="headerlink" title="素材轮播展示–carousel"></a>素材轮播展示–carousel</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">carsouel</span> 是懒加载的  第一次没有弹出之前  是没有组件元素的</span><br><span class="line">即使拿到<span class="selector-tag">index</span> 也没法用，因为不知道什么时间加载完，什么时间要用</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">dialog</span> 的<span class="selector-tag">open</span> 方法， 不能用，不知道什么时间渲染完成，所以用<span class="selector-tag">opened</span></span><br><span class="line"></span><br><span class="line">轮播逻辑</span><br><span class="line"><span class="selector-tag">dialog</span> 渲染 <span class="selector-tag">list</span> 里面的数据</span><br><span class="line">点击时转存索引  通过<span class="selector-tag">opened</span>事件 用 <span class="selector-tag">ref</span>调用文档中的<span class="selector-tag">api</span> <span class="selector-tag">setActiveItem</span>（索引实现跳转）</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">#### </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;头像更新及carousel的使用&quot;&gt;&lt;a href=&quot;#头像更新及carousel的使用&quot; class=&quot;headerlink&quot; title=&quot;头像更新及carousel的使用&quot;&gt;&lt;/a&gt;头像更新及carousel的使用&lt;/h3&gt;&lt;h4 id=&quot;头像更新–even
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="游乐招商" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86/"/>
    
    
      <category term="Vue 项目 后台管理" scheme="http://yoursite.com/tags/Vue-%E9%A1%B9%E7%9B%AE-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Laravel-CURD小结</title>
    <link href="http://yoursite.com/wiki/PHP-Laravel-CURD%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/wiki/PHP-Laravel-CURD%E5%B0%8F%E7%BB%93/</id>
    <published>2020-03-02T13:35:37.000Z</published>
    <updated>2021-07-10T15:20:00.385Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Laravel-CURD小结"><a href="#Laravel-CURD小结" class="headerlink" title="Laravel-CURD小结"></a>Laravel-CURD小结</h3><h2 id="1-curd思路设计表格式"><a href="#1-curd思路设计表格式" class="headerlink" title="1.curd思路设计表格式"></a>1.curd思路设计表格式</h2><pre><code>文章列表  id  标题， 内容，类型（类型i的）， 简介， 作者文章类型：1新闻，2科技，3社会，4自然，5教育</code></pre><h2 id="2-建立-模型，"><a href="#2-建立-模型，" class="headerlink" title="2.建立 模型，"></a>2.建立 模型，</h2><pre><code>php artisan make:model Models\Article -a    -a 创建所有 模型 迁移表 控制器</code></pre><h2 id="3-设计数据表并迁移到数据库"><a href="#3-设计数据表并迁移到数据库" class="headerlink" title="3.设计数据表并迁移到数据库"></a>3.设计数据表并迁移到数据库</h2><pre><code> 在database/migrate   文件夹    php artisan migrate(在数据库生成一个数据表)</code></pre><h2 id="4-设计数据表的模拟数据格式，生成模拟数据"><a href="#4-设计数据表的模拟数据格式，生成模拟数据" class="headerlink" title="4.设计数据表的模拟数据格式，生成模拟数据"></a>4.设计数据表的模拟数据格式，生成模拟数据</h2><pre><code>方法一    factory =》faker    命令  php artisan tinker   factory助手函数factory(App\Models\Article::class, 5)-&gt;make();factory(App\Models\Article::class, 5)-&gt;create();方法二seeder  php artisan make:seeder ArtTypesTableSeeder 生成类  ---&gt;查询构造器填数据---&gt;填充 php artisan db:seed(执行DatabaseSeeder.php)(手动执行   php artisan db:seed --class=*** 具体执行某一个填充类)</code></pre><h2 id="5-设置模型属性，"><a href="#5-设置模型属性，" class="headerlink" title="5.设置模型属性，"></a>5.设置模型属性，</h2><pre><code>详情见模型  1.定义主键 表名称 可填充数据的字段    protected $primaryKey=&#39;id&#39;;        protected $table=&#39;articles&#39;;        protected $fillable = [&#39;title&#39;,&#39;content&#39;,&#39;category_id&#39;,&#39;introduction&#39;, &#39;author&#39;];  2 .定义表的关联关系         两个关联表要同时定义关联关系， 可在php artisan tinker 里面做验证【类似sql语句， 程序里能写的都可以在这里做验证，相当于一个交互式的环境】</code></pre><h2 id="6-设置资源路由"><a href="#6-设置资源路由" class="headerlink" title="6.设置资源路由"></a>6.设置资源路由</h2><h2 id="7-控制器-视图编写相关代码"><a href="#7-控制器-视图编写相关代码" class="headerlink" title="7.控制器 视图编写相关代码"></a>7.控制器 视图编写相关代码</h2><p>create—-store<br>edit——–update</p><p><img src="/wiki/PHP-Laravel-CURD%E5%B0%8F%E7%BB%93/01.png"><br><img src="/wiki/PHP-Laravel-CURD%E5%B0%8F%E7%BB%93/02.png"><br><img src="/wiki/PHP-Laravel-CURD%E5%B0%8F%E7%BB%93/03.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Laravel-CURD小结&quot;&gt;&lt;a href=&quot;#Laravel-CURD小结&quot; class=&quot;headerlink&quot; title=&quot;Laravel-CURD小结&quot;&gt;&lt;/a&gt;Laravel-CURD小结&lt;/h3&gt;&lt;h2 id=&quot;1-curd思路设计表格式&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
      <category term="框架" scheme="http://yoursite.com/categories/PHP/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/categories/PHP/%E6%A1%86%E6%9E%B6/Laravel/"/>
    
    
      <category term="PHP 框架 Laravel" scheme="http://yoursite.com/tags/PHP-%E6%A1%86%E6%9E%B6-Laravel/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-跨域</title>
    <link href="http://yoursite.com/wiki/JavaScript-%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/wiki/JavaScript-%E8%B7%A8%E5%9F%9F/</id>
    <published>2019-09-28T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ol><li>不同域名 不同端口 不同协议  不同域名</li><li>proxy 代理  jsonp  后端配置(常用)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不同域名 不同端口 不同协议  不同域名&lt;/li&gt;
&lt;li&gt;proxy 代理  jsonp  后端配置(常用)&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript 基础知识 跨域" scheme="http://yoursite.com/tags/JavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Jquery和vue区别</title>
    <link href="http://yoursite.com/wiki/Jquery%E5%92%8Cvue%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/wiki/Jquery%E5%92%8Cvue%E5%8C%BA%E5%88%AB/</id>
    <published>2019-09-27T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jquery和vue区别"><a href="#jquery和vue区别" class="headerlink" title="jquery和vue区别"></a>jquery和vue区别</h3><ol><li>jq侧重于视图层，通过dom去实现页面的逻辑渲染 </li><li>vue侧重于数据层，通过双向绑定最终表现在dom，减少了dom操作</li><li>vue优势，组件化，提高了效率，方便重复使用，便于协同开发 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jquery和vue区别&quot;&gt;&lt;a href=&quot;#jquery和vue区别&quot; class=&quot;headerlink&quot; title=&quot;jquery和vue区别&quot;&gt;&lt;/a&gt;jquery和vue区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;jq侧重于视图层，通过dom去实现页面的逻辑渲染
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript 基础知识 jq vue" scheme="http://yoursite.com/tags/JavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-jq-vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-闭包</title>
    <link href="http://yoursite.com/wiki/JavaScript-%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/wiki/JavaScript-%E9%97%AD%E5%8C%85/</id>
    <published>2019-09-24T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h6 id="一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存储外部被引用的变量"><a href="#一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存储外部被引用的变量" class="headerlink" title="一个函数可以访问外部函数的内部变量，构成一个闭包环境(函数嵌套  引用外部函数变量，  内部函数有一个对象，存储外部被引用的变量)"></a>一个函数可以访问外部函数的内部变量，构成一个闭包环境(函数嵌套  引用外部函数变量，  内部函数有一个对象，存储外部被引用的变量)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">闭包的生命周期：在嵌套的内部函数成为垃圾对象时</span><br><span class="line">也就是不再被引用</span><br></pre></td></tr></table></figure><h3 id="闭包作用"><a href="#闭包作用" class="headerlink" title="闭包作用"></a>闭包作用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 变量维持的内存中</span><br><span class="line"><span class="number">2.</span> 保护内部变量，以防造成污染</span><br><span class="line">   - 但是会造成内存泄露</span><br></pre></td></tr></table></figure><h3 id="使用场景—自定义js模块"><a href="#使用场景—自定义js模块" class="headerlink" title="使用场景—自定义js模块"></a>使用场景—自定义js模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">开发中经常用到的函数，格式化时间日期的，判断是否是数字的等等，封装到一个模块里面，  </span><br><span class="line">在需要使用的地方引入。不能直接访问内部的东西，但是可以通过暴露接口给外部，操作内部的数据</span><br></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, o</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(o);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> fun(m, n);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">//   var b = fun(0).fun(1).fun(2).fun(3);  //0 1 2    </span></span><br><span class="line"> <span class="comment">// m1no n 1 o 0    m 2 n 1  n 2 o 1    m 3 n 2  n 3 o 2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  var a = fun(0);</span></span><br><span class="line">  <span class="comment">//  a.fun(1);//m 1 n 0</span></span><br><span class="line">  <span class="comment">//  a.fun(2); // m2 n 0</span></span><br><span class="line">  <span class="comment">//  a.fun(3); //m 3 n 0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>); <span class="comment">// m 1 n 0 n 1 o 0   </span></span><br><span class="line">    c.fun(<span class="number">2</span>); <span class="comment">// m 2 n 1 n 2 o 1 </span></span><br><span class="line">    c.fun(<span class="number">3</span>); <span class="comment">//  m 3 n 1  n 3 o 1</span></span><br></pre></td></tr></table></figure><h6 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数执行完后，函数内部局部变量没有释放，占用内存时间会边长容易造成内存泄露</span><br><span class="line">***解决---及时释放内存</span><br><span class="line">结束生命=====  f=<span class="literal">null</span></span><br></pre></td></tr></table></figure><h6 id="闭包的暴力理解"><a href="#闭包的暴力理解" class="headerlink" title="闭包的暴力理解"></a>闭包的暴力理解</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用闭包时候，当函数执行完，用一个新的引入变量，去接受内部函数返回的函数对象，闭包就在函数对象里面形成了，  </span><br><span class="line">作用就是 延长了外部函数变量的生命周期，以及内部函数对象的生命周期。</span><br><span class="line"></span><br><span class="line">如果没有引入变量是不会占用内存的，产生了  又放走了。</span><br><span class="line"></span><br><span class="line">结合截屏 看。。。对象的引用+垃圾回收机制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数在 那个对象里面调用，<span class="built_in">this</span>就指向那个对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="/wiki/JavaScript-%E9%97%AD%E5%8C%85/bibao.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闭包的作用&quot;&gt;&lt;a href=&quot;#闭包的作用&quot; class=&quot;headerlink&quot; title=&quot;闭包的作用&quot;&gt;&lt;/a&gt;闭包的作用&lt;/h3&gt;&lt;h6 id=&quot;一个函数可以访问外部函数的内部变量，构成一个闭包环境-函数嵌套-引用外部函数变量，-内部函数有一个对象，存
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript 基础知识 闭包" scheme="http://yoursite.com/tags/JavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>vue单页面应用的优缺点</title>
    <link href="http://yoursite.com/wiki/vue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://yoursite.com/wiki/vue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2019-08-30T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单页面应用的优缺点-单页面的优点："><a href="#单页面应用的优缺点-单页面的优点：" class="headerlink" title="单页面应用的优缺点 单页面的优点："></a>单页面应用的优缺点 单页面的优点：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点spa对服务器压力较小 </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 前后端分离 </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 页面效果会比较炫酷（比如切换页面内容时的专场动画） </span><br></pre></td></tr></table></figure><p>单页面的缺点 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 不利于seo </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理） </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 初次加载时耗时多 </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 页面复杂度提高很多</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单页面应用的优缺点-单页面的优点：&quot;&gt;&lt;a href=&quot;#单页面应用的优缺点-单页面的优点：&quot; class=&quot;headerlink&quot; title=&quot;单页面应用的优缺点 单页面的优点：&quot;&gt;&lt;/a&gt;单页面应用的优缺点 单页面的优点：&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue 单页面应用 优缺点" scheme="http://yoursite.com/tags/Vue-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8-%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue的样式穿透</title>
    <link href="http://yoursite.com/wiki/vue%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/"/>
    <id>http://yoursite.com/wiki/vue%E7%9A%84%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F/</id>
    <published>2019-08-30T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue深度作用域"><a href="#vue深度作用域" class="headerlink" title="vue深度作用域"></a>vue深度作用域</h3><h4 id="vue有-在有作用域样式的组建中，默认只能对作用域组件的根节点进行生效"><a href="#vue有-在有作用域样式的组建中，默认只能对作用域组件的根节点进行生效" class="headerlink" title="vue有 在有作用域样式的组建中，默认只能对作用域组件的根节点进行生效"></a>vue有 在有作用域样式的组建中，默认只能对作用域组件的根节点进行生效</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;根组件&gt;</span><br><span class="line">    &lt;子组件&gt;</span><br><span class="line">        &lt;子子组件&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/子子组件 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">    &lt;/子组件&gt;</span><br><span class="line">&lt;/根组件&gt;</span><br><span class="line"></span><br><span class="line">此时 样式a只能作用在根节点组件,要想作用在子组件可用以下解决办法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>脱离作用域，去掉scoped 但是容易和其他组件样式冲突</span><br><span class="line"><span class="number">2.</span> /deep/<span class="string">` 或者 `</span>::v-deep<span class="string">`  &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">详细见文档----&gt; loader ---&gt;作用域样式 深度作用域</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/deep/ .abc &#123;</span><br><span class="line">   <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line">     <span class="selector-tag">margin</span>：10<span class="selector-tag">px</span>;</span><br><span class="line">     <span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue深度作用域&quot;&gt;&lt;a href=&quot;#vue深度作用域&quot; class=&quot;headerlink&quot; title=&quot;vue深度作用域&quot;&gt;&lt;/a&gt;vue深度作用域&lt;/h3&gt;&lt;h4 id=&quot;vue有-在有作用域样式的组建中，默认只能对作用域组件的根节点进行生效&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue 样式穿透 深度作用域" scheme="http://yoursite.com/tags/Vue-%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F-%E6%B7%B1%E5%BA%A6%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-箭头函数与普通函数的区别</title>
    <link href="http://yoursite.com/wiki/JavaScript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/wiki/JavaScript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-08-24T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="箭头函数与普通函数的区别"><a href="#箭头函数与普通函数的区别" class="headerlink" title="箭头函数与普通函数的区别"></a>箭头函数与普通函数的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 内部没有arguments</span><br><span class="line">- 内部没有this</span><br><span class="line">- 不能作为构造器</span><br></pre></td></tr></table></figure><h4 id="写法区别"><a href="#写法区别" class="headerlink" title="写法区别"></a>写法区别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">es5 写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;es5&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">es6写法 show是变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;es6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">唯且仅有只有一个参数的时候()可以省略</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show = <span class="function"><span class="params">x</span> =&gt;</span> <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&#x27;es6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">当只有<span class="keyword">return</span>一行的时候，可以省略<span class="keyword">return</span>，&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数参数不确定"><a href="#函数参数不确定" class="headerlink" title="函数参数不确定"></a>函数参数不确定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">es5 写法</span><br><span class="line"></span><br><span class="line"><span class="built_in">arguments</span>是伪数组，转化为数组，<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)或者</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)，将他转化数组</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">es6写法</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arg);<span class="comment">//arg是一个数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  or</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> show = <span class="function">(<span class="params">...arg</span>)=&gt;</span> <span class="built_in">console</span>.log(arg)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数值默认"><a href="#函数值默认" class="headerlink" title="函数值默认"></a>函数值默认</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show(a, b=<span class="number">1</span>, c=<span class="number">3</span>) =&gt; <span class="built_in">console</span>.log(a+b+c)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>); <span class="comment">//3</span></span><br><span class="line">show(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//4</span></span><br><span class="line">show(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h4 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子一:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m+n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">箭头函数写法</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m =&gt; <span class="function"><span class="params">n</span> =&gt;</span> m+n 非常简洁</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">什么是函数柯里化</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;箭头函数与普通函数的区别&quot;&gt;&lt;a href=&quot;#箭头函数与普通函数的区别&quot; class=&quot;headerlink&quot; title=&quot;箭头函数与普通函数的区别&quot;&gt;&lt;/a&gt;箭头函数与普通函数的区别&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/JavaScript/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript 基础知识 函数 箭头函数" scheme="http://yoursite.com/tags/JavaScript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%87%BD%E6%95%B0-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue项目是打包及生成的文件</title>
    <link href="http://yoursite.com/wiki/vue%E9%A1%B9%E7%9B%AE%E6%98%AF%E6%89%93%E5%8C%85%E5%8F%8A%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/wiki/vue%E9%A1%B9%E7%9B%AE%E6%98%AF%E6%89%93%E5%8C%85%E5%8F%8A%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E4%BB%B6/</id>
    <published>2019-08-23T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue项目是打包了一个js文件，一个css文件"><a href="#vue项目是打包了一个js文件，一个css文件" class="headerlink" title="vue项目是打包了一个js文件，一个css文件"></a>vue项目是打包了一个js文件，一个css文件</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 根据vue-cli脚手架规范，一个js文件，一个CSS文件。 </span><br><span class="line">在打包之前</span><br><span class="line"> 1.代理的url </span><br><span class="line">2.build assetsPublicPath: &#39;.&#x2F;&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue项目是打包了一个js文件，一个css文件&quot;&gt;&lt;a href=&quot;#vue项目是打包了一个js文件，一个css文件&quot; class=&quot;headerlink&quot; title=&quot;vue项目是打包了一个js文件，一个css文件&quot;&gt;&lt;/a&gt;vue项目是打包了一个js文件，一
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue 基础知识 项目打包" scheme="http://yoursite.com/tags/Vue-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Mysql远程连接失败解决方案</title>
    <link href="http://yoursite.com/wiki/Mysql-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/wiki/Mysql-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2019-08-02T08:58:34.000Z</published>
    <updated>2021-07-10T15:20:00.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天编译安装mysql-Navicate远程连接失败-整理以下解决方案"><a href="#今天编译安装mysql-Navicate远程连接失败-整理以下解决方案" class="headerlink" title="今天编译安装mysql, Navicate远程连接失败,整理以下解决方案"></a>今天编译安装mysql, Navicate远程连接失败,整理以下解决方案</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安全组 开放端口</span><br><span class="line"><span class="number">2.</span>防火墙 开放端口</span><br><span class="line"><span class="number">3.</span> mysql 配置  bind <span class="number">0000</span></span><br><span class="line"><span class="number">4.</span>开放权限 修改mysql user表中 root 远程连接权限</span><br></pre></td></tr></table></figure><h3 id="在8-0以前，我们习惯使用以下命令授权远程连接操作："><a href="#在8-0以前，我们习惯使用以下命令授权远程连接操作：" class="headerlink" title="在8.0以前，我们习惯使用以下命令授权远程连接操作："></a>在8.0以前，我们习惯使用以下命令授权远程连接操作：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">但在<span class="number">8.0</span>以后，使用以上命令会报错</span><br><span class="line"><span class="built_in">ERROR</span> <span class="number">1410</span> (<span class="number">42000</span>): You are not allowed to create a user with GRANT</span><br></pre></td></tr></table></figure><h3 id="使用以下命令可以成功，但无法远程登陆："><a href="#使用以下命令可以成功，但无法远程登陆：" class="headerlink" title="使用以下命令可以成功，但无法远程登陆："></a>使用以下命令可以成功，但无法远程登陆：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">此时，可以使用以下<span class="number">2</span>种方式，实现远程：</span><br><span class="line">-- <span class="number">1.</span> 使用alter user</span><br><span class="line">alter user set user.host=<span class="string">&#x27;%&#x27;</span> where user.user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">-- <span class="number">2.</span> 使用create user</span><br><span class="line">create user <span class="string">&#x27;userName&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="string">&#x27;your_password&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="重要-flushprivileges-别忘记"><a href="#重要-flushprivileges-别忘记" class="headerlink" title="重要 flushprivileges 别忘记"></a>重要 flushprivileges 别忘记</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天编译安装mysql-Navicate远程连接失败-整理以下解决方案&quot;&gt;&lt;a href=&quot;#今天编译安装mysql-Navicate远程连接失败-整理以下解决方案&quot; class=&quot;headerlink&quot; title=&quot;今天编译安装mysql, Navicate远
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/mysql/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="mysql基础 远程连接" scheme="http://yoursite.com/tags/mysql%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>vue中NextTick是做什么的</title>
    <link href="http://yoursite.com/wiki/vue%E4%B8%ADNextTick%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84/"/>
    <id>http://yoursite.com/wiki/vue%E4%B8%ADNextTick%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NextTick-是做什么的"><a href="#NextTick-是做什么的" class="headerlink" title="NextTick 是做什么的"></a>NextTick 是做什么的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">说明： $nextTick 是在下次 DOM  更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，  </span><br><span class="line">则可以在回调中获取更新后的 DOM。  </span><br><span class="line"></span><br><span class="line">场景： 需要在视图更新之后，基于新的视图进行操作</span><br><span class="line">使用swiper axios请求数据， 数据（图片）</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NextTick-是做什么的&quot;&gt;&lt;a href=&quot;#NextTick-是做什么的&quot; class=&quot;headerlink&quot; title=&quot;NextTick 是做什么的&quot;&gt;&lt;/a&gt;NextTick 是做什么的&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue NextTick" scheme="http://yoursite.com/tags/Vue-NextTick/"/>
    
  </entry>
  
  <entry>
    <title>Es6--工作用到的</title>
    <link href="http://yoursite.com/wiki/Es6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%BF%85%E5%A4%87/"/>
    <id>http://yoursite.com/wiki/Es6-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%BF%85%E5%A4%87/</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="廖雪峰Es6"><a href="#廖雪峰Es6" class="headerlink" title="廖雪峰Es6"></a>廖雪峰Es6</h3><p><a href="https://es6.ruanyifeng.com/#docs/symbol">https://es6.ruanyifeng.com/#docs/symbol</a></p><h3 id="let-const-声明变量"><a href="#let-const-声明变量" class="headerlink" title="let const 声明变量"></a>let const 声明变量</h3><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="数组的结构"><a href="#数组的结构" class="headerlink" title="数组的结构"></a>数组的结构</h4><h4 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h4><h4 id="字符串函数结构"><a href="#字符串函数结构" class="headerlink" title="字符串函数结构"></a>字符串函数结构</h4><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><h4 id="展开数组"><a href="#展开数组" class="headerlink" title="展开数组"></a>展开数组</h4><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><h3 id="对象字面量简写法"><a href="#对象字面量简写法" class="headerlink" title="对象字面量简写法"></a>对象字面量简写法</h3><h4 id="当属性与值的变量同名时。"><a href="#当属性与值的变量同名时。" class="headerlink" title="当属性与值的变量同名时。"></a>当属性与值的变量同名时。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;quartz&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> color = <span class="string">&#x27;rose&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> carat = <span class="number">21.29</span>;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">const</span> gemstone = &#123;</span><br><span class="line">  type: type,</span><br><span class="line">  color: color,</span><br><span class="line">  carat: carat</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> gemstone = &#123;type,color,carat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gemstone);</span><br></pre></td></tr></table></figure><h4 id="简写方法的名称"><a href="#简写方法的名称" class="headerlink" title="简写方法的名称"></a>简写方法的名称</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gemstone = &#123;</span><br><span class="line">    testFunc() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;对象字面量方法简写&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">gemstone.testFunc();</span><br></pre></td></tr></table></figure><h4 id="在对象字面量中可以使用中括号作为属性，表示属性也能是一个变量"><a href="#在对象字面量中可以使用中括号作为属性，表示属性也能是一个变量" class="headerlink" title="在对象字面量中可以使用中括号作为属性，表示属性也能是一个变量"></a>在对象字面量中可以使用中括号作为属性，表示属性也能是一个变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jane&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  [name]: <span class="literal">true</span>   <span class="comment">//&#x27;Jane&#x27;:true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.Jane);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 类的继承extends</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><h3 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 字符串新方法</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><h3 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 模块</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;廖雪峰Es6&quot;&gt;&lt;a href=&quot;#廖雪峰Es6&quot; class=&quot;headerlink&quot; title=&quot;廖雪峰Es6&quot;&gt;&lt;/a&gt;廖雪峰Es6&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://es6.ruanyifeng.com/#docs/symbol&quot;&gt;http
      
    
    </summary>
    
    
      <category term="Es6" scheme="http://yoursite.com/categories/Es6/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Es6/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Es6 基础" scheme="http://yoursite.com/tags/Es6-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>表单验证</title>
    <link href="http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/wiki/%E9%A1%B9%E7%9B%AE-%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><h4 id><a href="#" class="headerlink" title></a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&#x27;login&#x27;&gt;</span><br><span class="line">     &lt;!<span class="selector-tag">--</span> 使用<span class="selector-tag">elementUI</span>组件 <span class="selector-tag">el-card</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;el-card class=&quot;login-card&quot;&gt;</span><br><span class="line">        &lt;!<span class="selector-tag">--</span> 匿名插槽 <span class="selector-tag">--</span>&gt;</span><br><span class="line">        &lt;div  class=&#x27;title&#x27;&gt;</span><br><span class="line">            &lt;img src=&quot;../../assets/img/logo_index.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 表单 =&gt; el-form包裹 --&gt;</span><br><span class="line">        &lt;!-- 数据校验 =&gt; el-form绑定 model ,绑定rules规则 --&gt;</span><br><span class="line">        &lt;el-form ref=&quot;myForm&quot; :model=&quot;loginForm&quot; :rules=&quot;loginRules&quot; style=&quot;margin-top:20px&quot;&gt;</span><br><span class="line">            &lt;!<span class="selector-tag">--</span> 每一个表单域由一个 <span class="selector-tag">Form-Item</span> 组件构成 <span class="selector-tag">--</span>&gt;</span><br><span class="line">            &lt;!<span class="selector-tag">--</span> <span class="selector-tag">form-item</span>  <span class="selector-tag">prop</span>属性 绑定 下面表单组件的 字段名 <span class="selector-tag">--</span>&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;mobile&quot;&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 表单域中可以放置各种类型的表单控件，包括 <span class="selector-tag">Input</span>、<span class="selector-tag">Select</span>、<span class="selector-tag">Checkbox</span>、<span class="selector-tag">Radio</span>、<span class="selector-tag">Switch</span>、<span class="selector-tag">DatePicker</span>、<span class="selector-tag">TimePicker</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 手机号 绑定 <span class="selector-tag">v-model</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;loginForm.mobile&quot; placeholder=&quot;请输入手机号&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;code&quot;&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 验证码 <span class="selector-tag">--</span>&gt;</span><br><span class="line">                &lt;el-input v-model=&quot;loginForm.code&quot; placeholder=&quot;请输入验证码&quot; style=&quot;width:65%&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 发送验证码 <span class="selector-tag">--</span>&gt;</span><br><span class="line">                &lt;el-button  style=&quot;float:right&quot;&gt;发送验证码&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;agree&quot;&gt;</span><br><span class="line">                &lt;!<span class="selector-tag">--</span> 同意选项 <span class="selector-tag">--</span>&gt;</span><br><span class="line">                &lt;el-checkbox v-model=&quot;loginForm.agree&quot;&gt;我已阅读并同意用户协议和隐私条款&lt;/el-checkbox&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">             &lt;<span class="selector-tag">el-form-item</span>&gt;</span><br><span class="line">                 &lt;!<span class="selector-tag">--</span> 登录按钮 <span class="selector-tag">--</span>&gt;</span><br><span class="line">                 &lt;!<span class="selector-tag">--</span> 注册点击事件 <span class="selector-tag">--</span>&gt;</span><br><span class="line">                 &lt;<span class="selector-tag">el-button</span> <span class="keyword">@click</span>=&quot;login&quot;  type=<span class="string">&quot;primary&quot;</span> style=<span class="string">&quot;width:100%&quot;</span>&gt;登录&lt;/el-button&gt;</span><br><span class="line">             &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">let</span> validator = <span class="function"><span class="keyword">function</span> (<span class="params">rule, value, callBack</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// rule当前规则</span></span><br><span class="line">      <span class="comment">// value当前表单项的值</span></span><br><span class="line">      <span class="comment">// callback 回调函数</span></span><br><span class="line">      <span class="comment">// 正常写法</span></span><br><span class="line">    <span class="comment">//   if (value) &#123;</span></span><br><span class="line">    <span class="comment">//     // 正确 勾选了协议</span></span><br><span class="line">    <span class="comment">//     callBack() // 一切OK请继续</span></span><br><span class="line">    <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     // 不对 没勾选协议</span></span><br><span class="line">    <span class="comment">//     callBack(new Error(&#x27;您必须同意无条件被我们蒙骗&#x27;))</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">      value ? callBack() : callBack(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;您必须同意无条件被我们蒙骗&#x27;</span>)) <span class="comment">// 炫技模式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 表单数据 是一个对象</span></span><br><span class="line">      loginForm: &#123;</span><br><span class="line">        mobile: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 手机号</span></span><br><span class="line">        code: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 验证码</span></span><br><span class="line">        agree: <span class="literal">false</span> <span class="comment">// 是否同意协议</span></span><br><span class="line">      &#125;,</span><br><span class="line">      loginRules: &#123;</span><br><span class="line">        <span class="comment">//   决定着校验规则  key(字段名):value(对象数组) =&gt; 一个对象就是一个校验规则</span></span><br><span class="line">        <span class="comment">// required 为true 就表示该字段必填 如果不填 就会提示消息</span></span><br><span class="line">        mobile: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入您的手机号&#x27;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">pattern</span>: <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>, message: <span class="string">&#x27;请输入合法的手机号&#x27;</span> &#125;],</span><br><span class="line">        code: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入您的验证码&#x27;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">pattern</span>: <span class="regexp">/^\d&#123;6&#125;$/</span>, message: <span class="string">&#x27;验证码为6位数字&#x27;</span> &#125;],</span><br><span class="line">        agree: [&#123; validator &#125;]</span><br><span class="line">      &#125; <span class="comment">// 登录规则集合对象</span></span><br><span class="line">      <span class="comment">// 自定义形式去校验</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login () &#123;</span><br><span class="line">      <span class="comment">// 校验整个表单的规则</span></span><br><span class="line">      <span class="comment">// validate 是一个方法 =&gt; 方法中传入的一个函数 两个校验参数  是否校验成功/未校验成功的字段</span></span><br><span class="line">      <span class="built_in">this</span>.$refs.myForm.validate(<span class="function"><span class="keyword">function</span> (<span class="params">isOK</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;校验成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">#### </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;表单验证&quot;&gt;&lt;a href=&quot;#表单验证&quot; class=&quot;headerlink&quot; title=&quot;表单验证&quot;&gt;&lt;/a&gt;表单验证&lt;/h3&gt;&lt;h4 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h4&gt;&lt;figure clas
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="游乐招商" scheme="http://yoursite.com/categories/Vue/%E9%A1%B9%E7%9B%AE/%E6%B8%B8%E4%B9%90%E6%8B%9B%E5%95%86/"/>
    
    
      <category term="Vue 项目 表单验证" scheme="http://yoursite.com/tags/Vue-%E9%A1%B9%E7%9B%AE-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>vue-router动态路由的定义</title>
    <link href="http://yoursite.com/wiki/vue-router%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/wiki/vue-router%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9A%E4%B9%89/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="怎么定义vue-router的动态路由"><a href="#怎么定义vue-router的动态路由" class="headerlink" title="怎么定义vue-router的动态路由"></a>怎么定义vue-router的动态路由</h3><pre><code>在router目录下的index.js文件中，对path属性加上/:id 怎么获取传过来的动态参数？ 使用router对象的params.id</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;怎么定义vue-router的动态路由&quot;&gt;&lt;a href=&quot;#怎么定义vue-router的动态路由&quot; class=&quot;headerlink&quot; title=&quot;怎么定义vue-router的动态路由&quot;&gt;&lt;/a&gt;怎么定义vue-router的动态路由&lt;/h3&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue 动态路由" scheme="http://yoursite.com/tags/Vue-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue双向绑定原理</title>
    <link href="http://yoursite.com/wiki/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/wiki/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2021-07-10T15:20:00.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue的双向数据绑定原理是什么？"><a href="#Vue的双向数据绑定原理是什么？" class="headerlink" title="Vue的双向数据绑定原理是什么？"></a>Vue的双向数据绑定原理是什么？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">view 更新data 可以通过事件监听，关键 data 如何更新view呢？</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">Object</span>.defineProperty()对属性设置一个set函数，当数据改变了，就会  </span><br><span class="line">触发这个函数，所以只要将一些需要更新的方法放在这里面，就能实现data更新view了   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 实现一个监听器Observer，用来劫持监听所有属性，如果有变动，通知订阅者</span><br><span class="line"><span class="number">2.</span> 实现一个订阅者watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图   </span><br><span class="line"><span class="number">3.</span> 实现一个解析器Compile，可以扫描和解析每个节点相关指令，初始化末班数据以及初始化相应的订阅者</span><br><span class="line"></span><br><span class="line">监听器 observer ===》 订阅者 watcher</span><br><span class="line"></span><br><span class="line">Compile 解析器 ===解析相关指令===》wachter </span><br><span class="line"></span><br><span class="line">watcher ===更新===》view</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总计：vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。</span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span>为什么会多出这两个方法呢？ 因为vue是通过<span class="built_in">Object</span>.defineProperty()来实现数据劫持的。</span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span><span class="built_in">Object</span>.defineProperty( )是用来做什么的？ 它可以来控制一个对象属性的一些特有操作，</span><br><span class="line">比如读写权、是否可以枚举，这里我们主要先来研究下它对应的两个描述属性get和set。</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(对象,属性,&#123; get()&#123;&#125;, set()&#123;&#125; &#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue的双向数据绑定原理是什么？&quot;&gt;&lt;a href=&quot;#Vue的双向数据绑定原理是什么？&quot; class=&quot;headerlink&quot; title=&quot;Vue的双向数据绑定原理是什么？&quot;&gt;&lt;/a&gt;Vue的双向数据绑定原理是什么？&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="基础" scheme="http://yoursite.com/categories/Vue/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Vue 双向绑定" scheme="http://yoursite.com/tags/Vue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
</feed>
